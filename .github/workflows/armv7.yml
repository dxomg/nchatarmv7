name: Linux (x86_64 + ARMv7)

on:
  pull_request:
  push:
    branches:
      - master
      - main
      - dev/*

jobs:
  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, armv7]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            qemu-user-static binfmt-support \
            cmake make build-essential \
            wget

          if [ "${{ matrix.arch }}" = "armv7" ]; then
            echo "Setting up ARMv7 cross-compilation..."
            sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

            # Ensure the toolchain file exists
            mkdir -p cmake
            if [ ! -f cmake/Toolchain-armv7.cmake ]; then
              echo "Toolchain file missing, creating default one..."
              cat > cmake/Toolchain-armv7.cmake <<'EOF'
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR arm)
set(CMAKE_C_COMPILER arm-linux-gnueabihf-gcc)
set(CMAKE_CXX_COMPILER arm-linux-gnueabihf-g++)
set(CMAKE_FIND_ROOT_PATH /usr/arm-linux-gnueabihf)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
EOF
            fi

            echo "CC=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
            echo "CXX=arm-linux-gnueabihf-g++" >> $GITHUB_ENV
            echo "CMAKEARGS=-DCMAKE_TOOLCHAIN_FILE=cmake/Toolchain-armv7.cmake" >> $GITHUB_ENV
            echo "OUTPUT_DIR=build-armv7" >> $GITHUB_ENV
          else
            echo "Building natively on x86_64..."
            echo "CMAKEARGS=" >> $GITHUB_ENV
            echo "OUTPUT_DIR=build-x86_64" >> $GITHUB_ENV
          fi

      - name: Build
        run: |
          mkdir -p $OUTPUT_DIR
          cd $OUTPUT_DIR
          cmake ${{ env.CMAKEARGS }} ..
          make -j$(nproc)
        env:
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}

      - name: Collect binaries
        run: |
          mkdir -p artifacts/${{ matrix.arch }}
          if [ -d $OUTPUT_DIR/bin ]; then
            cp -r $OUTPUT_DIR/bin/* artifacts/${{ matrix.arch }}/ || echo "No binaries found."
          else
            echo "No build output found in $OUTPUT_DIR/bin"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nchat-${{ matrix.arch }}
          path: artifacts/${{ matrix.arch }}/
          if-no-files-found: warn
